width = 6
)
),
box(
title = "QQ plot of Transformed Data", status = "success", height = "1250", width = 6, solidHeader = T,
column(
width = 10,
style = "height:100px;",
tags$style(HTML(".js-irs-0 .irs-single, .js-irs-0 .irs-bar-edge, .js-irs-0 .irs-bar {background: lightsalmon;}")),
tags$style(HTML(".js-irs-0 .irs-single, .js-irs-0 .irs-bar-edge, .js-irs-0 .irs-grid-text { font-size: 10pt;}")),
sliderInput("shapiroP", "Shapiro-Wilk Univariate Normality Test p-value:", value = 0.05, min = 0.001, max = 1, step = 0.01)
),
plotOutput("p1"), style = "height:1200px;overflow-y: scroll;overflow-x: scroll;", # 570
column(
width = 6
)
)
)
)
),
tabPanel(
"Outliers",
box(
title = "Data: Original ", status = "success", height =
"595", width = "12", solidHeader = T,
column(
width = 12,
DTOutput("x5"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
),
downloadButton("downloadData", "Download")
)
),
tabPanel(
"Outliers Advanced",
tabsetPanel(
tabPanel(
"Transformed Data & Outliers",
box(
title = "Data: Transformed ", status = "warning", height =
"595", width = 12, solidHeader = T,
column(
width = 12,
DTOutput("x6"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
)
),
tabPanel(
"Edit Table To Keep/Remove Outliers",
box(
tags$style(HTML(".js-irs-1 .irs-single, .js-irs-1 .irs-bar-edge, .js-irs-1 .irs-bar {background: green;}")),
tags$style(HTML(".js-irs-1 .irs-single, .js-irs-1 .irs-bar-edge, .js-irs-1 .irs-grid-text { font-size: 10pt;}")),
sliderInput("std", "Deviates From Standard Normal Mean For Outliers Detection:", value = 2.576, min = 0, max = 6, step = 0.01),
title = "Select Or Deselect Rows ", status = "success", height =
"695", width = 12, solidHeader = T,
column(
width = 12,
DTOutput("x7"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
),
box(
title = "Standard Normal Deviate", status = "success", height = "600", width = 12, solideHeader = T,
column(
width = 12,
DTOutput("stdTab1"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
)
),
tabPanel(
"Outliers Removed",
box(
title = "These Rows Will Be Excluded From Final Output ", status = "danger", height =
"595", width = 12, solidHeader = T,
column(
width = 12,
h1(textOutput("text2")),
DTOutput("x8"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
)
),
tabPanel(
"Final Output",
box(
title = "Final Output Table", status = "success", height =
"595", width = 12, solidHeader = T,
column(
width = 12,
DTOutput("x9"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
),
downloadButton("downloadData2", "Download")
)
)
)
)
)
)
),
############################################################################
# Second tab UI Content
# Tabpanel 2 starts here
tabItem(
tabName = "regressions",
fluidRow(
tabsetPanel(
tabPanel(
"Inputs",
tabsetPanel(
tabPanel(
"Target Input",
box(
column(
width = 4,
fileInput("file2", "Choose CSV File",
multiple = TRUE,
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv"
)
)
),
title = "Target Data", status = "success", height =
"695", width = 12, solidHeader = T,
column(
width = 12,
DTOutput("x10"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
# set up example data set
library("titanic")
data(titanic_train)
str(titanic_train)
View(titanic_train)
plot (titanic_train)
str (titanic_train)
summary(titanic_train)
outcome <- 'Survived'
target <- 1
shouldBeCategorical <- c('PassengerId', 'Pclass', 'Parch')
v
for(v in shouldBeCategorical) {
titanic_train[[v]] <- as.factor(titanic_train[[v]])
}
summary (titanic_train)
tooDetailed <- c("Ticket", "Cabin", "Name", "PassengerId")
tooDetailed
vars <- setdiff(colnames(titanic_train), c(outcome, tooDetailed))
vars
?setdiff
dTrain <- titanic_train
library("xgboost")
library("sigr")
install.packages("sigr")
install.packages("WVPlots")
install.packages("vtreat")
set.seed(4623762)
crossValPlan <- vtreat::kWayStratifiedY(nrow(dTrain),
10,
dTrain,
dTrain[[outcome]])
crossValPlan
evaluateModelingProcedure <- function(xMatrix, outcomeV, crossValPlan) {
preds <- rep(NA_real_, nrow(xMatrix))
for(ci in crossValPlan) {
nrounds <- 1000
cv <- xgb.cv(data= xMatrix[ci$train, ],
label= outcomeV[ci$train],
objective= 'binary:logistic',
nrounds= nrounds,
verbose= 0,
nfold= 5)
#nrounds  <- which.min(cv$evaluation_log$test_rmse_mean) # regression
nrounds  <- which.min(cv$evaluation_log$test_error_mean) # classification
model <- xgboost(data= xMatrix[ci$train, ],
label= outcomeV[ci$train],
objective= 'binary:logistic',
nrounds= nrounds,
verbose= 0)
preds[ci$app] <-  predict(model, xMatrix[ci$app, ])
}
preds
}
set.seed(4623762)
tplan <- vtreat::designTreatmentsZ(dTrain, vars,
minFraction= 0,
verbose=FALSE)
# restrict to common varaibles types
# see vignette('vtreatVariableTypes', package = 'vtreat') for details
sf <- tplan$scoreFrame
newvars <- sf$varName[sf$code %in% c("lev", "clean", "isBAD")]
trainVtreat <- as.matrix(vtreat::prepare(tplan, dTrain,
varRestriction = newvars))
print(dim(trainVtreat))
dTrain$predVtreatZ <- evaluateModelingProcedure(trainVtreat,
dTrain[[outcome]]==target,
crossValPlan)
View(dTrain)
sigr::permTestAUC(dTrain,
'predVtreatZ',
outcome, target)
WVPlots::ROCPlot(dTrain,
'predVtreatZ',
outcome, target,
'vtreat encoder performance')
View(dTrain)
str(titanic_train)
View(titanic_train)
outcome <- 'Survived'
target <- 1
shouldBeCategorical <- c('PassengerId', 'Pclass', 'Parch')
for(v in shouldBeCategorical) {
titanic_train[[v]] <- as.factor(titanic_train[[v]])
}
summary (titanic_train$Ticket)
titanic_train$Ticket
tooDetailed <- c("Ticket", "Cabin", "Name", "PassengerId")
outcome
class (outcome)
tooDetailed
titanic_train
?setdiff
vars <- setdiff(colnames(titanic_train), c(outcome, tooDetailed))
vars
var
vars
dTrain <- titanic_train
library("xgboost")
library("sigr")
library("WVPlots")
library("vtreat")
set.seed(4623762)
?kWayStratifiedY
outcome
dTrain
str (dTrain)
crossValPlan <- vtreat::kWayStratifiedY(nrow(dTrain),
10,
dTrain,
dTrain[[outcome]])
crossValPlan
outcomeV
xMatrix
evaluateModelingProcedure <- function(xMatrix, outcomeV, crossValPlan) {
preds <- rep(NA_real_, nrow(xMatrix))
for(ci in crossValPlan) {
nrounds <- 1000
cv <- xgb.cv(data= xMatrix[ci$train, ],
label= outcomeV[ci$train],
objective= 'binary:logistic',
nrounds= nrounds,
verbose= 0,
nfold= 5)
#nrounds  <- which.min(cv$evaluation_log$test_rmse_mean) # regression
nrounds  <- which.min(cv$evaluation_log$test_error_mean) # classification
model <- xgboost(data= xMatrix[ci$train, ],
label= outcomeV[ci$train],
objective= 'binary:logistic',
nrounds= nrounds,
verbose= 0)
preds[ci$app] <-  predict(model, xMatrix[ci$app, ])
}
preds
}
set.seed(4623762)
?designTreatmentsZ
dTrain
vars
dTrain
vars
tplan <- vtreat::designTreatmentsZ(dTrain, vars,
minFraction= 0,
verbose=FALSE)
tplan
# restrict to common varaibles types
# see vignette('vtreatVariableTypes', package = 'vtreat') for details
sf <- tplan$scoreFrame
sf
newvars <- sf$varName[sf$code %in% c("lev", "clean", "isBAD")]
trainVtreat <- as.matrix(vtreat::prepare(tplan, dTrain,
varRestriction = newvars))
trainVtreat
print(dim(trainVtreat))
dTrain$predVtreatZ <- evaluateModelingProcedure(trainVtreat,
dTrain[[outcome]]==target,
crossValPlan)
shiny::runApp('ML_Shiny')
runApp('ML_Shiny')
?tabOa
?tabPanel
runApp('ML_Shiny')
setwd("~/ML_Shiny")
x <- read.csv ('SourceData.csv')
setwd("~/RSPrj")
x <- read.csv ('SourceData.csv')
library (corrplot)
cor <- na.omit(x)[,2:ncol(x)]
corrplot(cor)
cor
cor <- cor(na.omit(x)[,2:ncol(x)])
y <- cor((na.omit(x))[,2:ncol(x)])
x <- na.omit(x)
y <- cor(x[,2:ncol(x)])
x
y <- cor(x[,3:ncol(x)])
corrplot (y)
y <- cor(x[,3:ncol(x)], hclust)
library(data.table)
library(mltools)
install.packages("mltools")
install.packages("mltools")
library(mltools)
customers_1h <- one_hot(as.data.table(x$SourceType))
customers_1h
cbind (customers_1h, x[,3:ncol(x)])
V <- cbind (customers_1h, x[,3:ncol(x)])
V_cor <- cor(V)
corrplot (V_cor)
?corrplot
corrplot (V_cor, hclust.method = 'ward')
corrplot (V_cor, order=  'hclust')
corrplot (V_cor, order=  'hclust', diag = FALSE)
corrplot (V_cor, order=  'hclust', diag = FALSE, type = 'pie')
corrplot (V_cor, order=  'hclust', diag = FALSE, type = 'upper')
corrplot (V_cor,  diag = FALSE, type = 'upper')
boxplot (factor(x$SourceType),)
boxplot (factor(x$SourceType))
boxplot (x~factor(x$SourceType))
boxplot (x)
boxplot (x, factor (x$SourceType))
boxplot (t(x))
x
boxplot (t(x[,2:ncol(x)]))
x
t(x)
colnames(x)
boxplot(Size ~ SourceType, data = x, ylab = "Duration of conversation")
boxplot (OrganicContent ~ SourceType, data = x, ylab = 'Organic Content')
nidprop$treatment <- relevel(nidprop$treatment, ref="c")
data (nidrop)
lm( Sepal.Width ~ C(Species,contr.treatment(3, base=2)), data=iris )
Speciaes
Species
Species
contr.treatment()
levels (x$SampleName)
levels (x$SourceType)
data.df <- data.frame(
topic = c(rep(c("Gossip", "Sports", "Weather"), each = 4)),
duration  = c(6:9, 2:5, 4:7)
)
print(data.df)
boxplot(duration ~ topic, data = data.df, ylab = "Duration of conversation")
model.lm <- lm(duration ~ topic, data = data.df)
summary(model.lm)
topic
data.df$topic
x <- read.csv ('SourceData.csv')
x <- na.omit (x)
rownames(x) <- x[,1]
x <- x[,-1]
model.lm <- lm (x$SourceType ~ ., data = x)
model.lm
summary (model.lm)
str (x)
x [,2:ncol(x)] <- apply (x[,2:ncol(x)], 2, as.numeric)
model.lm <- lm (x$SourceType ~ ., data = x)
x
data.df <- data.frame(
topic = c(rep(c("Gossip", "Sports", "Weather"), each = 4)),
duration  = c(6:9, 2:5, 4:7)
)
print(data.df)
model.lm <- lm(duration ~ topic, data = data.df)
summary(model.lm)
summary (data.df$topic)
summary (x$SourceType)
model.lm <- lm (x$SourceType~x$Size, data = x)
model.lm <- glm (x$SourceType ~ ., data = x)
View(x)
str (x)
model.lm <- glm (x$SourceType ~ ., data = x, family="binomial")
?glm
model.lm <- glm (x$SourceType ~ ., data = x, family="gamma")
data.df <- data.frame(
topic = c(rep(c("Gossip", "Sports", "Weather"), each = 4)),
duration  = c(6:9, 2:5, 4:7)
)
print(data.df)
boxplot(duration ~ topic, data = data.df, ylab = "Duration of conversation")
data.df
str (data.df)
model.lm <- lm(duration ~ topic, data = data.df)
summary(model.lm)
data.df$duration <- data.df$duration+0.1
model.lm <- lm(duration ~ topic, data = data.df)
summary(model.lm)
data.df$duration
str (data.df)
x <- read.csv ('SourceData.csv')
x <- na.omit (x)
rownames(x) <- x[,1]
x <- x[,-1]
x [,2:ncol(x)] <- apply (x[,2:ncol(x)], 2, as.numeric)
model.lm <- lm (x$SourceType ~ ., data = x)
str (x)
levels(x$SourceType)
model.lm <- lm (x$SourceType ~ Size, data = x)
Size
x$Size
x$SourceType
model.lm <- lm (Size ~ SourceType, data = x)
model.lm
summary (model.lm)
rsq <- summary(model.lm)$r.squared
rsq
#[1] 0.6808511
sqrt(rsq)
x
colnames(x)
x <- read.csv ('SourceData.csv')
x <- na.omit (x)
rownames(x) <- x[,1]
x <- x[,-1]
x [,2:ncol(x)] <- apply (x[,2:ncol(x)], 2, as.numeric)
model.lm <- lm (OrganicContent ~ SourceType, data = x)
rsq <- summary(model.lm)$r.squared
rsq
#[1] 0.6808511
sqrt(rsq)
#[1] 0.825137
summary (model.lm)
colnames(x)
model.lm <- lm (Aluminum ~ SourceType, data = x)
summary (model.lm)
model.lm <- lm (Arsenic ~ SourceType, data = x)
summary (model.lm)
model.lm <- lm (Barium ~ SourceType, data = x)
summary (model.lm)
colnames(x)
model.lm <- lm (Beryllium ~ SourceType, data = x)
summary (model.lm)
model.lm <- lm (Cadmium ~ SourceType, data = x)
summary (model.lm)
colnames(x)
model.lm <- lm (Chromium ~ SourceType, data = x)
summary (model.lm)
model.lm <- lm (Cobalt ~ SourceType, data = x)
summary (model.lm)
model.lm <- lm (Copper ~ SourceType, data = x)
summary (model.lm)
rsq <- summary(model.lm)$r.squared
rsq
#[1] 0.6808511
sqrt(rsq)
model.lm <- lm (Iron ~ SourceType, data = x)
summary (model.lm)
colnames(x)
model.lm <- lm (Lead ~ SourceType, data = x)
summary (model.lm)
model.lm <- lm (Magnesium ~ SourceType, data = x)
summary (model.lm)
colnames(x)
model.lm <- lm (Manganese ~ SourceType, data = x)
summary (model.lm)
model.lm <- lm (Nickel ~ SourceType, data = x)
summary (model.lm)
model.lm <- lm (Potassium ~ SourceType, data = x)
summary (model.lm)
colnames(x)
model.lm <- lm (Strontium ~ SourceType, data = x)
summary (model.lm)
model.lm <- lm (Uranium ~ SourceType, data = x)
summary (model.lm)
model.lm <- lm (Vanadium ~ SourceType, data = x)
summary (model.lm)
model.lm <- lm (Zinc ~ SourceType, data = x)
summary (model.lm)
colnames(x)
model.lm <- lm (Delta13COrganic ~ SourceType, data = x)
summary (model.lm)
model.lm <- lm (Delta15N ~ SourceType, data = x)
summary (model.lm)
colnames(x)
model.lm <- lm (Cs137 ~ SourceType, data = x)
summary (model.lm)
model.lm <- lm (X210PbXs ~ SourceType, data = x)
summary (model.lm)
rsq <- summary(model.lm)$r.squared
rsq
#[1] 0.6808511
sqrt(rsq)
runApp('C:/Users/tsabitov/Downloads/first_kaggle_example.R')
setwd("C:/Users/tsabitov/Downloads/cleanupproj")
runApp('first_kaggle_example.R')
# input data table
datas <- read.csv("data-2019-01-21.csv")
runApp('first_kaggle_example.R')
runApp('~/ML_Shiny')
setwd("~/ML_Shiny")
runApp()
runApp()
setwd("~/ML_Shiny")
runApp()
#User interface
library(caret)
library(xgboost)
library(dplyr)
library(e1071)
library(shiny)
library(shinydashboard)
source("pcg.R")
source ('server.R')
runApp()
setwd("~/ML_Shiny")
runApp()
