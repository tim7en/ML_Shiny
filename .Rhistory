plot(fitted(fit), residuals(fit))
lines(lowess(fitted(fit), residuals(fit)))
title("Residual vs Fit. value ", col = "red")
acf(residuals(fit), main = "")
title("Residual Autocorrelation Plot")
})
# output$x13 <- renderDT({
#   x <- as.character(input$xE3)
#   loc <- which(targetData()[, 1] == x)
#   x13()[[1]][[loc]]
# })
# output$x14 <- renderDT({
#   datas1 <- x13()[[2]]
#   datas2 <- x13()[[3]]
#   datas3 <- (unlist(x13()[[5]]))
#   datas3 <- cbind(datas3, names(datas3))
#   colnames(datas3) <- c("lm", "elements")
#   dat <- cbind(round(unlist(datas1), 4), round(unlist(datas2), 4))
#   dat <- cbind(dat, rownames(dat))
#   colnames(dat) <- c("R-2", "p-val of residuals", "elements")
#   dat <- merge(dat, datas3, by = "elements", all = T)
#   dat
# })
# Tabpanel 3
output$x21 <- renderDT({
downloadFinal2()[, -ncol(downloadFinal2())]
})
output$x22 <- renderDT(targetData(), selection = "none")
x23 <- reactive({
ranNumberGenUnmixing(x6()[[1]], transformnames(), input$Nsamples, input$stat, input$inCheckboxGroup, x$df)
})
output$x23 <- renderDT({
datas <- x23()
})
x20 <- reactive({
req(input$file3)
df <- read.csv(input$file3$datapath,
header = T,
sep = ",",
quote = '"'
)
})
output$x20 <- renderDT({
x20()
})
x24 <- eventReactive(input$Submit, {
req (dfaList())
dat <- outputCorrected ()
DFA_l <- dfaList()
targets <- as.data.frame(targetData())
output <- NULL
datOutput <- NULL
withProgress(
message = "Running... (this may take a while)", {
for (i in seq(1:input$mcSimul)) {
incProgress(1 / input$mcSimul, detail = paste("Mixing...", i))
for (j in seq (1: length (dat))){
datas <- dat[[j]]
target <- as.data.frame(targets[j,])
names (target) <- names(targets)
DFA <- as.data.frame(DFA_l[j,])
names (DFA) <- names(DFA_l)
ID <- target[1,1]
DFA <- cbind (ID, DFA)
datas <- as.data.frame(datas)
rownames(datas) <- datas [,1]
datas <- datas[,-1]
datas <- getSubsetmean(datas)
if (input$mcSimul == 1) {
output <- UseUnMixing(target, datas, DFA, method = "Nelder-Mead")
rn <- rownames(output)
output <- output[order(rn), ]
} else {
datas <- ranNumberGenUnmixing(x6()[[1]], transformnames(), input$Nsamples, input$stat, input$inCheckboxGroup, x$df)
datas <- as.data.frame(datas)
datas <- getSubsetmean(datas)
result <- UseUnMixing(targets, datas, DFA, method = "Nelder-Mead")
output <- rbind(output, result)
rn <- rownames(output)
output <- output[order(rn), ]
}
datOutput <- rbind (datOutput, output)
}
}
rownames(datOutput) <- seq (1,nrow (datOutput))
round(datOutput, 3)
}
)
})
output$x24 <- renderDT({
x24()
})
output$propPlot <- renderPlot ({
req (x24())
datas <- x24()
datas <- datas[,-ncol(datas)]
datas <- (melt(datas))
colnames(datas) <- c("Id", "Class","Proportion")
datas[, 1] <- as.factor(datas[, 1])
p <- ggplot(datas, aes(x = Id, y = Proportion, fill = Class)) +
geom_bar(stat = "identity", position = "fill") + ggtitle("Proportion of sediment fluxes")
p
})
# Check boxes
output$choose_columns <- renderUI({
if (is.null(input$file1)) {
return()
}
# Get the data set with the appropriate name
colnames <- colnames(x23())
# Create the checkboxes and select them all by default
checkboxGroupInput("columns", "Choose columns",
choices = colnames,
selected = colnames
)
})
observe({
req(input$file1)
dsnames <- colnames(contents()[, -c(1, 2)])
cb_options <- list()
cb_options[ dsnames] <- dsnames
updateCheckboxGroupInput(session, "inCheckboxGroup",
label = "Columns: ",
choices = cb_options,
selected = dsnames
)
})
observe({
req(input$file1)
datas <- downloadFinal2()
dsnames <- colnames(datas[, -c(1, 2, ncol(datas))])
cb_options <- list()
cb_options[ dsnames] <- dsnames
updateCheckboxGroupInput(session, "sizeOnly",
label = "Columns: ",
choices = cb_options,
selected = dsnames
)
})
downloadFinal <- reactive({
datas <- x5()
datas <- datas[[1]]
if (is.null(sel())) {
s <- selectedRows()
} else {
s <- sel()
}
if (length(s) > 0) {
datas <- datas[-s, ]
} else {
datas
}
})
downloadFinal2 <- reactive({
datas <- x5()[[1]]
# s <- sel()
if (is.null(sel()) == F) {
s <- sel()
datas <- datas[-s, ]
} else {
datas
}
})
output$downloadData <- downloadHandler(
filename = function() {
paste("Output", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write.csv(downloadFinal(), file, row.names = FALSE)
}
)
output$downloadData2 <- downloadHandler(
filename = function() {
paste("Output", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write.csv(downloadFinal2(), file, row.names = FALSE)
}
)
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "Report.pdf",
content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "Report.Rmd")
file.copy("Report.Rmd", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(
shapiroP = input$shapiroP, std = input$std, Nsamples = input$Nsamples, stat = input$stat,
inCheckboxGroup = input$inCheckboxGroup, mcSimul = input$mcSimul, x1_cell_edit = input$x1_cell_edit,
x7_rows_selected = input$x7_rows_selected, selectedRows = selectedRows(), s = sel(),
unmixing = x24()
)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport,
output_file = file,
params = params,
envir = new.env(parent = globalenv())
)
}
)
proxy <- dataTableProxy(c("x1")) # Allow to change table
observeEvent(input$x1_cell_edit, {
info <- input$x1_cell_edit
# str(info)
i <- info$row
j <- info$col
v <- info$value
x$df[i, j] <- isolate(DT::coerceValue(v, x$df[i, j]))
})
######################################################## TAB2 Input#################3
targetData <- reactive({
req(input$file2)
df <- read.csv(input$file2$datapath,
header = T,
sep = ",",
quote = '"'
)
})
#fifth table
x50 <- reactive({
req(input$file4)
df <- read.csv(input$file4$datapath,
header = T,
sep = ",",
quote = '"'
)
})
output$x50 <- renderDT ({
x11()
})
x51 <- reactive ({
dat <- x11()
rownames(dat) <- dat[,1]
dat <- dat[,-1]
dat[,1] <- as.numeric(dat[,1]) -1
# Make split index
P_split <- input$dfsplit
train_index <- sample(1:nrow(dat), nrow(dat)*P_split)
data_variables <- as.matrix(dat[,-1])
data_label <- dat[,1]
data_matrix <- xgb.DMatrix(data = as.matrix(dat), label = data_label)
# split train data and make xgb.DMatrix
train_data   <- data_variables[train_index,]
train_label  <- data_label[train_index]
train_matrix <- xgb.DMatrix(data = train_data, label = train_label)
test_data  <- data_variables[-train_index,]
test_label <- data_label[-train_index]
test_matrix <- xgb.DMatrix(data = test_data, label = test_label)
#Define model, number of rounds and number of cross validation
numberOfClasses <- length(unique(dat[,1]))
xgb_params <- list("objective" = "multi:softprob",
"eval_metric" = "mlogloss",
"num_class" = numberOfClasses)
nround    <- 300 # number of XGBoost rounds
cv.nfold  <- 20 #the original dataset is randomly partitioned into nfold equal size subsamples
# Fit cv.nfold * cv.nround XGB models and save OOF predictions
cv_model <- xgb.cv(params = xgb_params,
data = train_matrix,
nrounds = nround,
nfold = cv.nfold,
verbose = FALSE,
prediction = TRUE)
OOF_prediction <- data.frame(cv_model$pred) %>%
mutate(max_prob = max.col(., ties.method = "last"),
label = train_label + 1)
#head(OOF_prediction)
# confusion matrix
j <- confusionMatrix(factor(OOF_prediction$max_prob),
factor(OOF_prediction$label),
mode = "everything")
})
}
# User interface side of the user input
ui <- dashboardPage(
skin = "blue",
dashboardHeader(title = "SedSat_ShinyV2"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Input", tabName = "dataInput", icon = icon("upload")),
menuItem("Size & TOC Correction", tabName = "regressions", icon = icon("random")),
menuItem("Discriminant Function Analysis", tabName = "DFA", icon = icon("table")),
menuItem("Mixing Model", tabName = "mixmod", icon = icon("cubes"))#,
#menuItem("ML Model", tabName = "mlmod", icon = icon("circle"))
)
),
dashboardBody( # Body content
tabItems(
tabItem( # First tab content
tabName = "dataInput",
fluidRow(
box(
fileInput("file1", "Choose CSV File",
multiple = TRUE,
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv"
)
),
# Horizontal line ----
tags$hr(),
textOutput("text1"),
# Some message
tags$hr(),
# Download report button
uiOutput("download"),
width = 4
),
box(
title = "Input Table: ", status = "primary", height =
"595", width = "8", solidHeader = T,
column(
width = 12,
DTOutput("x1"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
),
tabsetPanel(
tabPanel(
"Original Data p-values",
box(
title = textOutput("origTitle"), status = "success", height = "630", width = 12, solidHeader = T,
column(
width = 12,
DTOutput("x2"), style = "height: 550px; overflow-y: scroll; overflow-x: scroll;"
)
)
),
tabPanel(
"Transformations Advanced",
tabsetPanel(
tabPanel(
"Methods",
box(
title = "Methods p-values ", status = "danger", height = "630", width = 12, solidHeader = T,
column(
width = 12,
DTOutput("x4"), style = "height:550px; overflow-y: scroll;overflow-x: scroll;"
)
)
),
tabPanel(
"Transformed p-values",
box(
title = "Methods p-values ", status = "danger", height = "630", width = 12, solidHeader = T,
column(
width = 12,
DTOutput("x3"), style = "height: 550px; overflow-y: scroll; overflow-x: scroll;"
)
)
),
tabPanel(
"QQ Plots",
box(
title = "QQ plot of Original Data", status = "success", height = "1250", width = 6, solidHeader = T,
column(
width = 10,
style = "height:100px;",
uiOutput("Elements")
),
plotOutput("p"), style = "height:1200px;overflow-y: scroll;overflow-x: scroll;",
column(
width = 6
)
),
box(
title = "QQ plot of Transformed Data", status = "success", height = "1250", width = 6, solidHeader = T,
column(
width = 10,
style = "height:100px;",
tags$style(HTML(".js-irs-0 .irs-single, .js-irs-0 .irs-bar-edge, .js-irs-0 .irs-bar {background: lightsalmon;}")),
tags$style(HTML(".js-irs-0 .irs-single, .js-irs-0 .irs-bar-edge, .js-irs-0 .irs-grid-text { font-size: 10pt;}")),
sliderInput("shapiroP", "Shapiro-Wilk Univariate Normality Test p-value:", value = 0.05, min = 0.001, max = 1, step = 0.01)
),
plotOutput("p1"), style = "height:1200px;overflow-y: scroll;overflow-x: scroll;", # 570
column(
width = 6
)
)
)
)
),
tabPanel(
"Outliers",
box(
title = "Data: Original ", status = "success", height =
"595", width = "12", solidHeader = T,
column(
width = 12,
DTOutput("x5"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
),
downloadButton("downloadData", "Download")
)
),
tabPanel(
"Outliers Advanced",
tabsetPanel(
tabPanel(
"Transformed Data & Outliers",
box(
title = "Data: Transformed ", status = "warning", height =
"595", width = 12, solidHeader = T,
column(
width = 12,
DTOutput("x6"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
)
),
tabPanel(
"Edit Table To Keep/Remove Outliers",
box(
tags$style(HTML(".js-irs-1 .irs-single, .js-irs-1 .irs-bar-edge, .js-irs-1 .irs-bar {background: green;}")),
tags$style(HTML(".js-irs-1 .irs-single, .js-irs-1 .irs-bar-edge, .js-irs-1 .irs-grid-text { font-size: 10pt;}")),
sliderInput("std", "Deviates From Standard Normal Mean For Outliers Detection:", value = 2.576, min = 0, max = 6, step = 0.01),
title = "Select Or Deselect Rows ", status = "success", height =
"695", width = 12, solidHeader = T,
column(
width = 12,
DTOutput("x7"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
),
box(
title = "Standard Normal Deviate", status = "success", height = "600", width = 12, solideHeader = T,
column(
width = 12,
DTOutput("stdTab1"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
)
),
tabPanel(
"Outliers Removed",
box(
title = "These Rows Will Be Excluded From Final Output ", status = "danger", height =
"595", width = 12, solidHeader = T,
column(
width = 12,
h1(textOutput("text2")),
DTOutput("x8"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
)
)
),
tabPanel(
"Final Output",
box(
title = "Final Output Table", status = "success", height =
"595", width = 12, solidHeader = T,
column(
width = 12,
DTOutput("x9"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
),
downloadButton("downloadData2", "Download")
)
)
)
)
)
)
),
############################################################################
# Second tab UI Content
# Tabpanel 2 starts here
tabItem(
tabName = "regressions",
fluidRow(
tabsetPanel(
tabPanel(
"Inputs",
tabsetPanel(
tabPanel(
"Target Input",
box(
column(
width = 4,
fileInput("file2", "Choose CSV File",
multiple = TRUE,
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv"
)
)
),
title = "Target Data", status = "success", height =
"695", width = 12, solidHeader = T,
column(
width = 12,
DTOutput("x10"), style = "height:500px; overflow-y: scroll;overflow-x: scroll;"
setwd("~/ML_Shiny")
shiny::runApp()
source("pcg.R")
source ('Modules.R')
library(caret)
library(xgboost)
library(dplyr)
library(e1071)
library(shiny)
library(shinydashboard)
source ('ui.R')
runApp()
?xgb.cv
runApp('C:/Users/tsabitov/Downloads/ML_Shiny-master')
runApp('C:/Users/tsabitov/Downloads/ML_Shiny-1462fe092feb6ddfe844bb4743840c47a7249458')
runApp('C:/Users/tsabitov/Downloads/ML_Shiny-1462fe092feb6ddfe844bb4743840c47a7249458')
runApp()
runApp()
runApp()
runApp()
